dnl Process this file with autoconf to produce a configure script.
dnl $Id$

# requires autoconf
AC_PREREQ(2.52)

# init autoconf
AC_INIT(src/hid/hid.c)

# set program version number
VERSION=1.70
PACKAGE=tiemu
AC_SUBST(VERSION)
AC_SUBST(PACKAGE)

# specify a config file
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_MAINTAINER_MODE

AM_CONFIG_HEADER(config.h)

# determine the system type
dnl AC_CANONICAL_SYSTEM
# determine the host type
AC_CANONICAL_HOST

# change the default prefix (/usr/local) to /usr
AC_PREFIX_DEFAULT('/usr')

# build time sanity check...
AM_SANITY_CHECK

# Just for fun :)
echo -n "checking for something to drink while compiling..."
echo " err: no fridge found"

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LN_S
AC_ISC_POSIX

# gettext support (must be set here; before libti* dependancy checks)
#ALL_LINGUAS="fr de"
#AM_GNU_GETTEXT

# find pkg-config
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG = xno ; then
  AC_MSG_ERROR([*** pkg-config not found. See http://www.freedesktop.org/software/pkgconfig/])
fi

# checks for header files.
AC_PATH_X
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h strings.h sys/time.h unistd.h \
	alloca.h errno.h libintl.h sys/timeb.h)
AC_CHECK_HEADERS(jpeglib.h)
AC_CHECK_HEADERS(stdint.h)

dnl checks for libraries.
AC_CHECK_LIB(m, pow)
AC_CHECK_LIB(jpeg, jpeg_destroy_compress)
AC_CHECK_LIB(pthread, pthread_create) dnl needed by SDL

# checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_HEADER_DIRENT
AC_FUNC_STAT
AC_TYPE_MODE_T
AC_TYPE_UID_T

# checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_MALLOC
AC_FUNC_STAT
AC_TYPE_MODE_T
AC_TYPE_UID_T
AC_STRUCT_TM
AC_CHECK_FUNCS(getcwd getwd putenv strdup strstr strtol atexit ftime memchr memset strrchr mkdir pow)

# Win32 stuffs
AC_MSG_CHECKING([for Win32])
case "$host" in
  *-*-mingw*)   tilp_native_win32=yes LDFLAGS="$LDFLAGS -no-undefined" ;;
  *-*-cygwin)   tilp_native_win32=yes ;;
  *)            tilp_native_win32=no  ;;
esac
AC_MSG_RESULT([$tilp_native_win32])
AM_CONDITIONAL(OS_WIN32, test "$tilp_native_win32" = "yes")

# Ensure MSVC-compatible struct packing convention is used when
# compiling for Win32 with gcc.
# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
# gcc2 uses "-fnative-struct".
if test x"$tilp_native_win32" = xyes; then
  if test x"$GCC" = xyes; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    if test -z "$ac_cv_prog_CC"; then
      our_gcc="$CC"
    else
      our_gcc="$ac_cv_prog_CC"
    fi
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
        if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
          msnative_struct='-fnative-struct'
        fi
        ;;
      *)
        if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
          msnative_struct='-mms-bitfields'
        fi
        ;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
  fi
fi

#AC_CYGWIN32
#AC_MINGW32
#AC_EXEEXT

case $host in
  *-*-mingw*) ARCH="-D__WIN32__ -D__MINGW32__ -Os -s" ;;
  *-*-cygwin) ARCH="-D__WIN32__ -D__CYGWIN__ -mno-cygwin" ;;
  *-*-*bsd*)  ARCH="-D__BSD__" ;;
  i[[34]]86-*-linux-*) ARCH="-D__I386__ -D__LINUX__" ;; 
  i[[56]]86-*-linux-*) ARCH="-O3 -mcpu=pentium -DPENT_COUNTER -DX86_ASSEMBLY -D__LINUX__" ;;
  *)          ARCH="-D__LINUX__" ;;
esac

# check for ticables presence
PKG_CHECK_MODULES(TICABLES, ticables >= 3.8.3)
AC_SUBST(TICABLES_CFLAGS)
AC_SUBST(TICABLES_LIBS)

# check for tifiles presence
PKG_CHECK_MODULES(TIFILES, tifiles >= 0.5.9)
AC_SUBST(TIFILES_CFLAGS)
AC_SUBST(TIFILES_LIBS)

# check for ticalcs presence
PKG_CHECK_MODULES(TICALCS, ticalcs >= 4.5.3)
AC_SUBST(TICALCS_CFLAGS)
AC_SUBST(TICALCS_LIBS)

# check for gthread presence
PKG_CHECK_MODULES(GTHREAD, gthread-2.0 >= 2.2.0)
AC_SUBST(GTHREAD_CFLAGS)
AC_SUBST(GTHREAD_LIBS)

# check for glib presence
PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.2.2)
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

# check for gtk presence
PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.2.0)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

#check for SDL
AM_PATH_SDL

CFLAGS="$CFLAGS $TICABLES_CFLAGS $TIFILES_CFLAGS $TICALCS_CFLAGS $GTHREAD_CFLAGS $GLIB_CFLAGS $GTK_CFLAGS $SDL_CFLAGS"
LDFLAGS="$LDFLAGS $TICABLES_LIBS $TIFILES_LIBS $TICALCS_LIBS $GTHREAD_LIBS $GLIB_LIBS $GTK_LIBS $SDL_LIBS"

# initialize libtool
AM_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

# some extra flags
CFLAGS="$CFLAGS $ARCH -Wall -DGTK_DISABLE_DEPRECATED -DDEBUGGER"
LDFLAGS="$LDFLAGS"

# pass flags
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_OUTPUT([Makefile
build/Makefile 
man/Makefile 
pixmaps/Makefile
ROMs/Makefile 
skins/Makefile 
src/Makefile
tiemu.lsm 
tiemu.spec])

echo
echo "To run the TiEmu emulator, you will need a ROM image. As this file is"
echo "copyrighted by Texas Instruments it will never be distributed with"
echo "the emulator..."
echo
echo "If you already have some ROMs, place them in the ./ROMs directory"
echo "so that they can be installed with TiEmu."
echo "It you have no ROM, you can get an ROM image of your calculator"
echo "with the 'ROM dump' function of TiLP."
echo "Else, you can use TI's FLASH OS upgrade (AMS). But, it contains less"
echo "informations than an pure ROM image."
echo
echo "Note: TiLP is available at [http://lpg.ticalc.org/prj_tilp]."
echo
echo "Now, you can type 'make' and 'make install'"
echo ;

