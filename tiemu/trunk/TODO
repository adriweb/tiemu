List of stuffs to do (in French, sorry):

ExtendeD
========

* Un bug non reproduit : l'ouverture du débugger faisait défiler très
rapidement toute seule la fenêtre Code sans s'arrêter à n'importe quel
adresses (trop hautes pour être du code).

* Si le débogueur est ouvert, qu'on est en mode 'run' : si on charge
 une state image, et qu'on essaie de faire un 'break', celui-ci ne
 répond pas (il répond si on ferme le débogeur : il se réouvre tout de
 suite).


Kevin
=====

* Un truc qui serait bien serait une fonction "breakpoint on program entry".
Mais comme la feature dans VTI est implémentée plutôt avec les pieds, il
faudrait qu'on discute de ça ensemble pour ne pas faire les mêmes erreurs.
Le problème n°1 dans VTI est sa manière foireuse de récupérer l'adresse du
heap. Voici une méthode qui fonctionne:
 move.l $c8,a3 ;get ROM call table address
 cmp.l #$441,-4(a3) ;check if HeapTable is present
 bcs.s getheap_ams1
 lea.l $441*4(a3),a0 ;get address of HeapTable
 move.l a0,(a4)+ ;set Heap
 bra.s getheap_ams2
getheap_ams1:
 move.l HeapDeref*4(a3),a0
 clr.w (a4)+
 move.w 8(a0),(a4)+ ;set Heap
getheap_ams2:
Ceci devrait être facilement implémentable en C dans l'émulateur, ce ne sont
que des lookups d'adresses. Ce code pourrait aussi être utilisé pour
afficher une fenêtre "Handles" comme le fait VTI.

*  Il y a un bogue avec le débogueur et les touches: prends un AMS 2.0x ou 3.0x, mets 
un breakpoint sur le trap #11, lance un programme ASM (même Exec "4e750000" suffit), 
quitte le débogueur, appuie sur n'importe quelle touche, il réagit comme si c'était ENTER. 
Seulement après avoir désactivé le BP sur le trap 11 et appuyé sur ENTER une autre fois, 
TiEmu reprend son comportement normal.
Ce problème est apparemment causée par le fait qu'une touche (ENTER) est appuyée au moment 
où on entre dans le débogueur. (Le BP sur le trap 11 s'active au moment où ENTER est encore 
appuyé.)

* Au fait, même si avec les touches pour changer d'apps bloquées, la calculatrice émulée 
se bloque quand-même par occasion. Il y a plein de moyens de causer ce bogue avec la souris 
seulement. Il faudrait vraiment que tu corriges ce bogue à la racine plutôt que de chercher 
des workarounds. Et ensuite:
- le blocage des touches ne sert à rien, la machine émulée ne reçoit quand-même pas les 
touches même si tu empêches leur fonction système (et comme déjà dit, le bogue de la machine 
bloquée est quand-même là),
- je trouve ta manière de bloquer ces touches à l'initialisation 
de TiEmu et de ne les réactiver qu'à la fin très brutale. Si tu penses que c'est une bonne 
idée de garder cette feature, il faudrait trouver un moyen de ne le faire que si TiEmu est 
la fenêtre active.

Bref, je pense que le mieux est de désactiver ce code.
Une manière simple de reproduire le bogue du blocage de l'engine: appuie sur le bouton droit 
de la souris sur l'écran, garde-le appuyé jusqu'à ce que le menu apparaît, puis relâche-le 
sans rien sélectionner dans le menu -> hop, émulateur bloqué.

* Et sinon, il y a un autre cas particulier bizarre, je ne sais pas 
s'il vaut le coup de le traîter, mais _bcd_math est un ROM_CALL qui s'appelle comme ça:
- n'importe quelle méthode d'appel d'un ROM_CALL (jsr, F-Line etc.)
- 2 octets: opcode FPU
et le ROM_CALL saute ces 2 octets en retournant, donc retourne à next_pc+2. Si tu veux 
gérer ça, tu devrais regarder le target du jsr ou F-Line et comparer avec l'adresse de 
_bcd_math.
Précisions:
- la "FPU" est purement émulée en logiciel par _bcd_math, et les opcodes ne correspondent 
à aucune FPU réelle
- Pour le F-Line, tu peux comparer l'opcode avec 0xF8B5, mais pour les appels par jsr, 
tu n'as pas d'autre choix que de tester le target du saut pour savoir si on saute vers 
_bcd_math ou aillers

Il y en a un dans TIGCCLIB:

__floatunssibf:
 link.w %a6,#-36
 pea.l 8(%a6)
 move.l 0xC8,%a0
 move.l 0xB5*4(%a0),%a0 /* _bcd_math */
 jsr (%a0)
 .word 0x6B30 /* bcdMove | bcdUnsigned | bcdAbsSrc | bcdR0 */
 move.l -10(%a6),%d0
 move.l -6(%a6),%d1
 move.w -2(%a6),%d2
 unlk %a6
 rts

Le .word 0x6B30 est le code de la pseudo-FPU dont je parle. Et ce n'est pas
exécuté par le processeur, _bcd_math rajoute 2 octets à l'adresse de retour.

* FLINE addresse: 
Le problème, c'est qu'il faut d'abord trouver __ld_entry_point pour calculer l'adresse.
Mais tu peux le faire avec la table des handles: tu cherches le handle contenant 
l'adresse courante (instruction désassemblée), et tu as __ld_entry_point = HeapDeref(handle)+2.

Lionel
======

* Un bug bizarre, dont les instructions de
reproduction semblent être:
        * utiliser un AMS "récent" (2.07+), sur une 92+ ou
V200 (peut-être 89 aussi ?).
        * aller dans la fenêtre de debug, partie sélection
des ROM_CALLs, sélectionner l'un d'entre eux
(_bcd_math par exemple).
        * passer à une AMS 2.05 (testé: ROM dump de 89 avec
certificate).
        * aller dans la fenêtre de debug: TIEmu est parti
dans le décor, je ne sais pas s'il exécute ou pas

* Il y a un petit bug dans la fenêtre des breakpoints
(c'est le bug mineur dont je ne me souvenais plus
l'autre fois): quand on a breaké le debugger par F11,
le mode de break est inconnu, et ça affiche <unknown
(bug)>...

roms
====

* MOVEA.W diassembled as MOVEA.L (HeapDeref)

-------------
+ done
- in progress
* to do...
